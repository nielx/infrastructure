user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
	worker_connections 2048;
	use epoll;
	multi_accept on;
}

http {
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	log_format main	'$remote_addr - $remote_user [$time_local] "$request" '
			'$status $body_bytes_sent "$http_referer" '
			'"$http_user_agent" "$http_x_forwarded_for"';

#	access_log /var/log/nginx/access.log main;
	access_log off;

	sendfile on;

	keepalive_timeout 65;

	tcp_nopush on;
	tcp_nodelay on;

	gzip on;

	server {
		listen 8081;
		server_name haiku-os.org;

		rewrite ^/(.*)$ https://www.haiku-os.org/$1 permanent;
	}

	server {
		listen 8081;
		server_name api.haiku-os.org;

		rewrite ^/HIG/(.*)$ https://www.haiku-os.org/docs/HIG/$1 permanent;
		rewrite ^/(.*)$ https://www.haiku-os.org/docs/api/$1 permanent;
	}

	server {
		listen 8081;
		server_name userguide.haiku-os.org;

		rewrite ^/(.*)$ https://www.haiku-os.org/docs/userguide/$1 permanent;
	}

	server {
		listen 8081;
		server_name buildbot.haiku-os.org;

		location / {
			proxy_pass http://127.0.0.1:8010;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
		}
	}

	server {
		listen 8081;
		server_name buildbot-test.haiku-os.org;

		location / {
			proxy_pass http://127.0.0.1:18010;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
		}
	}

	server {
		listen 8081;
		server_name ports-mirror.haiku-os.org;

		location / {
			root /ports-mirror;
			autoindex on;
			autoindex_exact_size off;
		}
	}

	map_hash_bucket_size 128;

	map $uri $currentImage {
		include /haiku-files/nightly-images/currentImages.map.nginx;
	}

	server {
		listen 8081;
		server_name download.haiku-os.org;

		root /haiku-files;

		gzip off;

		location / {
			autoindex on;
			autoindex_exact_size off;
		}

		if ($currentImage) {
			return 302 $currentImage;
		}
	}
}
